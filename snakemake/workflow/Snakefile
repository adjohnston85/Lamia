#!/usr/bin/env python

# Snakemake Snakefile for the Majel pipeline

# Include rule and function files
include: "master.smk"
include: "rules/00_transfer_ref_genome.smk"
include: "rules/01_softlink_fastq.smk"
include: "rules/01_download_sra.smk"
include: "rules/02_trim_fastq.smk"
include: "rules/03_align_fastq.smk"
include: "rules/04_deduplicate_bam.smk"
include: "rules/05_call_methylation.smk"
include: "rules/06_call_variants.smk"
include: "rules/07_calculate_statistics.smk"
include: "rules/08_methylseekr_and_TDF.smk"
include: "rules/09_majel_cleanup.smk"

# Define local rules for the pipeline
localrules: \
    all, \
    transfer_ref_genome, \
    softlink_fastq, \
    picard_metrics, \
    merge_fastq, \
    calculate_stats, \

local_log = os.path.join(config['output_path'], 'snakemake')
output_files = get_all_files(D_genomes, D_sample_details)

# Define a rule to generate all output files from the pipeline
rule all:
    input:
        output_files

# Define actions to perform on pipeline start, success, and error
onstart:
    # Append the hidden snakemake log to a local log file    
    shell("cat {log} >> {local_log}.log")

onsuccess:
    # Copy relevant portion of log to the sample folder
    copy_log_to_sample(log)
    
    # Append the hidden snakemake log to a local log file
    shell("cat {log} >> {local_log}.log")

    # Iterate over the samples in the D_sample_details dictionary
    for sample, details in D_sample_details.items():
        output_path = details['output_path']
        umi_len = details.get("umi_len", None)
        
        # Define the cleanup path based on the config
        cleanup_check = details.get("cleanup", None)
        rsync_check = details.get("rsync_check", None)
        
        # Function to perform the cleanup if the check file does not exist
        def perform_cleanup_if_needed():
            if cleanup_check and not os.path.exists(cleanup_check):
                perform_cleanup(sample, output_path, umi_len)

        # Function to perform rsync if the check file does not exist
        def perform_rsync_if_needed():
            if rsync_check and not os.path.exists(rsync_check):
                perform_rsync(sample, output_path, rsync_path)

        # Check if rsync path is provided in the config
        if "rsync" in config:
            rsync_path = config["rsync"]
            if rsync_check and not os.path.exists(rsync_check):
                perform_cleanup_if_needed()
                perform_rsync(sample, output_path, rsync_path)
        # Perform cleanup if the cleanup flag is set and the file does not exist
        elif cleanup_check:
            perform_cleanup_if_needed()

        # Remove temporary files for each sample
        remove_temp_files(sample, details)

onerror:
    # Copy relevant portion of log to the sample folder    
    copy_log_to_sample(log)
    
    # Append the hidden snakemake log to a local log file    
    shell("cat {log} >> {local_log}.error")

'''
Rules:
    Snakefile:
        all                     - establishes all output files from all rules

    00_transfer_ref_genome.smk:
        transfer_ref_genome     - transfers reference genome files to working directory when using an HPC job scheduling system

    01_softlink_fastq.smk:
        softlink_fastq          - softlinks fastq files derived from "data_dir" and "file_prefixes" --config variable

    01_sra_download.smk:
        sra_download            - downloads run accessions stiulated in "file_prefixes" --config variable
        sra_to_fastq            - converts sra files to fastqs

    02_trim_fastq.smk:
        move_umi                - moves umis from read to name using Fastp
        trim_fastq              - trims fastqs using trim_galore
        merge_fastq             - merges r1 fastqs together and r2 fastqs together

    03_align_fastq.smk:
        bismark_align           - aligns fastq sequences using Bismark to produce BAM files
        sort_bam                - merges and sorts BAM files using samtools
        fix_mate_information    - fixes mate information in BAM files using Picard
        umi_extraction_to_rx    - extracts UMIs from BAM and adds them to the RX tag
        filter_non_conversion   - filters non-conversion reads from BAM
        picard_metrics          - collects Picard metrics such as insert size and hybrid selection metrics

    04_deduplicate_bam.smk:
        picard_deduplication    - deduplicates reads in sorted BAM using Picard (when UMIs are not present)
        correct_umis            - corrects UMIs in BAM files
        group_reads_by_umi      - groups reads by UMI
        call_molecular_consensus_reads - calls molecular consensus reads
        filter_consensus_reads  - filters consensus reads
        convert_bam_to_fastq_pair - converts BAM to paired-end fastq files
        bismark_realign         - realigns converted fastq files using Bismark
        clip_bam                - clips overlapping reads in BAM files
        merge_se_pe_bams        - merges single-end and paired-end BAM files
        duplex_methylation_processing - processes duplex methylation data

    05_call_methylation.smk:
        call_methylation        - calls cytosine methylation using MethylDackel for downstream analysis

    06_call_variants.smk:
        mask_converted_bases    - masks base positions in BAM potentially affected by cytosine conversion
        call_variants           - calls variants from cytosine converted data

    07_calculate_statistics.smk:
        calculate_coverage      - calculates sequencing coverage statistics
        calculate_stats         - calculates cytosine conversion statistics
        bismark2report          - compiles multiple Bismark reports into a single HTML report
        plot_read_length_histograms - plots read length histograms
        plot_coverage           - plots sequencing coverage

    08_methylseekr_and_TDF.smk:
        methylseekr_and_TDF     - calls UMRs and LMRs with and without PMDs, produces TDF file for IGV

    09_majel_cleanup.smk:
        cleanup                 - removes temporary files, restructures output directories, and zips text files
        rsync                   - moves final output to a specified directory

'''
